# 🎯 Virtual Keyboard with Hand Tracking

## 📝 Description
The **Virtual Keyboard with Hand Tracking** is an innovative touchless typing solution that combines computer vision and artificial intelligence to enable users to type using hand gestures. Built with **Python**, **MediaPipe**, **OpenCV**, and **Pygame**, this application provides a modern, accessible way to interact with digital interfaces without physical contact.

The system uses advanced hand tracking technology to detect finger movements and translates them into keyboard input, making it perfect for environments where hygiene is crucial, accessibility is needed, or traditional input methods are not available.

## 🚀 Features

* 👋 **Advanced Hand Tracking** - Uses Google's MediaPipe to detect and track 21 key points on each hand with high precision
* ⌨️ **Virtual QWERTY Keyboard** - Full keyboard layout with responsive key design and visual feedback
* 🌍 **Bilingual Support** - Seamless switching between English and Arabic layouts with proper RTL text rendering
* 🎯 **Smart Key Selection** - Point with your index finger to select keys with a 1-second hold-to-press mechanism
* ✌️ **Gesture Controls** - Use victory sign (peace sign) with both hands to switch between language layouts
* ⏱️ **Visual Feedback** - Progress bars and color-coded indicators show selection and press progress
* 🎨 **Modern UI Design** - Beautiful gradient backgrounds, rounded corners, and smooth animations
* 📱 **Responsive Interface** - Supports both fullscreen and windowed modes with dynamic scaling
* 📹 **Live Camera Feed** - Real-time camera preview with hand landmark visualization
* 🔤 **Arabic Text Processing** - Proper Arabic character shaping and bidirectional text support
* 🎮 **Smooth Performance** - Optimized for 60 FPS with efficient rendering

## 📂 Project Structure

```
virtual-keyboard/
├── app.py                 # Main application file
└── README.md              # Project documentation
```

## 🛠️ Technology Stack

| Component | Technology | Purpose |
|-----------|------------|---------|
| **Computer Vision** | MediaPipe | Hand detection and tracking |
| **Camera Processing** | OpenCV | Video capture and image processing |
| **User Interface** | Pygame | Graphics rendering and event handling |
| **Arabic Support** | arabic-reshaper, python-bidi | RTL text processing |
| **Language** | Python 3.7+ | Core application logic |

## ⚙️ Installation

### 1. **Clone the Repository**
```bash
git clone https://github.com/yourusername/virtual-keyboard-hand-tracking.git
cd virtual-keyboard-hand-tracking
```

### 2. **Create Virtual Environment** (Recommended)
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

### 3. **Install Dependencies**
```bash
pip install -r requirements.txt
```

### 4. **Install Additional Requirements**
```bash
pip install pygame opencv-python mediapipe arabic-reshaper python-bidi numpy
```

### 5. **Run the Application**
```bash
python main.py
```

## 🎮 How to Use

### **Basic Controls**
* **👆 Pointing**: Use your index finger to point at virtual keys
* **⏱️ Hold to Press**: Hold your finger over a key for 1 second to activate it
* **✌️ Language Switch**: Make victory sign with both hands and hold for 2 seconds
* **🖥️ Fullscreen Toggle**: Press `F11` to switch between fullscreen and windowed mode
* **🚪 Exit**: Press `ESC` to exit (or exit fullscreen first if in fullscreen mode)

### **Hand Gestures**
1. **Index Finger Pointing** - Primary interaction method for key selection
2. **Victory Sign (Peace Sign)** - Both hands must show index and middle fingers up
3. **Hold Gesture** - Keep finger steady over key for the duration timer

### **Keyboard Features**
* **SPACE** - Add space character
* **BACK** - Delete last character
* **CLEAR** - Clear entire text
* **Layout Toggle** - Switch between English/Arabic using victory gesture

## 🎯 Use Cases

* 🏥 **Medical Environments** - Sterile environments where touch interfaces aren't suitable
* 🏭 **Industrial Settings** - Clean rooms or areas where hands may be dirty/gloved
* ♿ **Accessibility** - Users with limited mobility or motor impairments
* 🎥 **Public Displays** - Interactive kiosks and public terminals
* 🧪 **Research Labs** - Environments requiring contamination control
* 🎓 **Educational Demos** - Computer vision and AI demonstrations

## 🔧 Configuration

### **Camera Settings**
```python
# In HandDetector.__init__()
self.hands = self.mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=2,                    # Detect up to 2 hands
    min_detection_confidence=0.7,       # Detection sensitivity
    min_tracking_confidence=0.5         # Tracking sensitivity
)
```

### **Timing Settings**
```python
# In VirtualKeyboard.__init__()
self.press_duration = 1.0              # Key press hold time (seconds)
self.layout_switch_duration = 2.0      # Layout switch hold time (seconds)
```

### **Display Settings**
```python
# In main constants
SCREEN_WIDTH = 1400                    # Default windowed width
SCREEN_HEIGHT = 900                    # Default windowed height
FPS = 60                              # Target frame rate
```

## 🎨 Design Principles

* **🎯 Intuitive Interaction** - Natural hand gestures that feel intuitive to users
* **⚡ Responsive Feedback** - Immediate visual feedback for all user actions
* **🎨 Modern Aesthetics** - Clean, professional design with smooth animations
* **🌐 Cultural Sensitivity** - Proper support for Arabic text rendering and RTL layout
* **♿ Accessibility First** - Designed with accessibility and inclusion in mind
* **🔧 Extensible Architecture** - Modular code structure for easy customization

## 🚀 Future Enhancements

* ✅ **Multi-language Support** - Add support for more languages (Spanish, French, etc.)
* 🔧 **Custom Layouts** - Allow users to create custom keyboard layouts
* 📊 **Typing Analytics** - Track typing speed and accuracy metrics
* 🎛️ **Settings Panel** - GUI for adjusting sensitivity and timing parameters
* 🔊 **Audio Feedback** - Optional sound effects for key presses
* 💾 **Text Save/Export** - Save typed text to files or clipboard
* 🤖 **ML Improvements** - Enhanced gesture recognition with custom training
* 📱 **Mobile Support** - Adapt for mobile and tablet devices

## 🐛 Troubleshooting

### **Camera Issues**
```bash
# Check if camera is available
python -c "import cv2; print(cv2.VideoCapture(0).isOpened())"
```

### **Arabic Font Issues**
- The application automatically tries to load system Arabic fonts
- On Windows: Ensure Arial or Tahoma fonts are available
- On Linux: Install DejaVu Sans fonts
- On Mac: Arial Unicode MS should be available by default

### **Performance Issues**
- Lower the FPS if experiencing lag: `FPS = 30`
- Reduce camera resolution for better performance
- Close other camera applications before running

### **Hand Detection Problems**
- Ensure good lighting conditions
- Keep hands visible and unobstructed
- Adjust `min_detection_confidence` for sensitivity
- Make sure camera is not blocked

## 📋 Requirements

### **Hardware Requirements**
- **Camera**: USB webcam or built-in camera
- **RAM**: Minimum 4GB (8GB recommended)
- **CPU**: Multi-core processor (Intel i5 or equivalent)
- **OS**: Windows 10+, macOS 10.14+, or Linux Ubuntu 18.04+

### **Software Requirements**
- **Python**: 3.7 or higher
- **OpenCV**: 4.5.0+
- **MediaPipe**: 0.8.0+
- **Pygame**: 2.0.0+

## 🤝 Contributing

1. **Fork** the repository
2. **Create** a feature branch (`git checkout -b feature/AmazingFeature`)
3. **Commit** your changes (`git commit -m 'Add some AmazingFeature'`)
4. **Push** to the branch (`git push origin feature/AmazingFeature`)
5. **Open** a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

* **Google MediaPipe** - For the excellent hand tracking library
* **OpenCV Community** - For computer vision tools and documentation
* **Pygame Community** - For the game development framework
* **Arabic-Reshaper & Python-BiDi** - For Arabic text processing support

---

### 🌟 Star this repository if you found it helpful!

**Made with ❤️ for accessible computing and innovative human-computer interaction**